run_storage:
  module: dagster_postgres.run_storage
  class: PostgresRunStorage
  config:
    postgres_db:
      username: dagster
      password: { "env": "DAGSTER_PG_PASSWORD" }
      hostname: { "env": "DAGSTER_PG_HOST" }
      db_name: dagster
      port: 5432

schedule_storage:
  module: dagster_postgres.schedule_storage
  class: PostgresScheduleStorage
  config:
    postgres_db:
      username: dagster
      password: { "env": "DAGSTER_PG_PASSWORD" }
      hostname: { "env": "DAGSTER_PG_HOST" }
      db_name: dagster
      port: 5432

event_log_storage:
  module: dagster_postgres.event_log
  class: PostgresEventLogStorage
  config:
    postgres_db:
      username: dagster
      password: { "env": "DAGSTER_PG_PASSWORD" }
      hostname: { "env": "DAGSTER_PG_HOST" }
      db_name: dagster
      port: 5432

scheduler:
  module: dagster.core.scheduler
  class: DagsterDaemonScheduler

run_coordinator:
  module: dagster.core.run_coordinator
  class: QueuedRunCoordinator
  config:
    max_concurrent_runs: 10
    tag_concurrency_limits:
      - key: "source"
        value:
          applyLimitPerUniqueValue: true
        limit: 1

telemetry:
  enabled: false

auto_materialize:
  run_tags:
    key: "dagster/auto_materialize"

run_launcher:
  module: dagster_aws.ecs
  class: EcsRunLauncher

#compute_logs:
#  module: dagster_aws.s3.compute_log_manager
#  class: S3ComputeLogManager
#  config:
#    bucket:
#      env: ${STORAGE_BUCKET}
#    prefix:
#      env: log/dagster
