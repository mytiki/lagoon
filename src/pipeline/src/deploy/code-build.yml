CodeBuild:
  Type: AWS::CodeBuild::Project
  Properties:
    Name: mytiki-lagoon-pipeline-deploy
    ServiceRole: !GetAtt CodeBuildRole.Arn
    Artifacts:
      Type: CODEPIPELINE
    Environment:
      Type: LINUX_CONTAINER
      ComputeType: BUILD_GENERAL1_SMALL
      Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
      EnvironmentVariables:
        - Name: AWS_DEFAULT_REGION
          Value: !Ref AWS::Region
        - Name: AWS_ACCOUNT_ID
          Value: !Ref AWS::AccountId
        - Name: REPOSITORY_NAME
          Value: !Ref StorageBucket
        - Name: SECRET_ID
          Value: !GetAtt ClusterSecret.Id
    Source:
      Type: CODEPIPELINE
      BuildSpec: |
        version: 0.2
        phases:
          pre_build:
            commands:
              - sudo yum install -y jq
              - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
              - CLUSTER_SECRETS=$(aws secretsmanager get-secret-value --secret-id $SECRET_ID --query 'SecretString' --output text)
              - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REPOSITORY_NAME
              - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
              - IMAGE_TAG=dbt-$COMMIT_HASH
          build:
            commands:
              - docker build -t $REPOSITORY_URI:$IMAGE_TAG .
          post_build:
            commands:
              - docker push $REPOSITORY_URI:$IMAGE_TAG
              - printf '[{"name":"mytiki-lagoon-pipeline-dbt","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
              - UPDATED_SECRETS=$(echo $CLUSTER_SECRETS | jq --arg uri "$REPOSITORY_URI" --arg tag "$IMAGE_TAG" '.DAGSTER_CURRENT_IMAGE |= $uri + ":" + $tag')
              - aws secretsmanager update-secret --secret-id $SECRET_ID --secret-string "$UPDATED_SECRETS"
        artifacts:
          files: 
            - imagedefinitions.json
    TimeoutInMinutes: 60
    QueuedTimeoutInMinutes: 480
    LogsConfig:
      CloudWatchLogs:
        Status: DISABLED
      S3Logs:
        Status: ENABLED
        Location: !Sub ${StorageBucket}/log/pipeline/deploy
